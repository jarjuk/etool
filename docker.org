* ~etool~ Docker
  :PROPERTIES:
  :header-args+: :dir  docker/etool
  :header-args+: :var  ETOOL_DOCKER_TAG="1"
  :END:


** Build  ~marcus2002/etool~ 


#+BEGIN_SRC bash :eval no-export :results output :exports output
echo Current ETOOL_DOCKER_TAG=$ETOOL_DOCKER_TAG
#+END_SRC

#+RESULTS:
: Current ETOOL_DOCKER_TAG=1

Build ~marcus2002/etool:$ETOOL_DOCKER_TAG~

#+BEGIN_SRC bash :eval no-export :results output :exports code
docker build -t marcus2002/etool:$ETOOL_DOCKER_TAG .  2>&1; echo $?
#+END_SRC

#+RESULTS:
#+begin_example
/home/jj/work/etool/docker/etool
Sending build context to Docker daemon  250.9kB
Step 1/34 : FROM ubuntu:18.04
 ---> c3c304cb4f22
Step 2/34 : RUN apt-get update &&      apt-get install -y      curl      wget      git      gnupg2  gnupg
 ---> Using cache
 ---> 8649238509b5
Step 3/34 : RUN apt-get install -y       build-essential       linux-headers-$(uname -r)       dkms
 ---> Using cache
 ---> ace38c0968f1
Step 4/34 : ENV LANG C.UTF-8
 ---> Using cache
 ---> 2157eb1ec776
Step 5/34 : ENV TZ=Europe/Helsinki
 ---> Using cache
 ---> 4adfde947877
Step 6/34 : RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
 ---> Using cache
 ---> b8d4f93898a9
Step 7/34 : RUN apt-get -y install     tzdata
 ---> Using cache
 ---> e4bab8080cb0
Step 8/34 : RUN     sudo cp /etc/apt/sources.list /etc/apt/sources.list.orig     &&   sed -i -e'/bionic main restricted/s!# deb-src!deb-src!'                       -e'/bionic-updates main restricted/s!# deb-src!deb-src!'                 -e'/bionic universe/s!# deb-src!deb-src!'                 -e'/bionic-updates universe/s!# deb-src!deb-src!'                 /etc/apt/sources.list     && apt-get update
 ---> Using cache
 ---> 1844c3037dee
Step 9/34 : RUN apt-get -y install    devscripts    build-essential     dpkg-dev    debhelper    dh-python    libudev-dev    libxenomai-dev    tcl8.6-dev    tk8.6-dev    libreadline-gplv2-dev    asciidoc dblatex    docbook-xsl    dvipng    graphviz    groff    inkscape    python-lxml    source-highlight    w3c-linkchecker    xsltproc    texlive-extra-utils    texlive-font-utils    texlive-fonts-recommended texlive-lang-cyrillic texlive-lang-french texlive-lang-german texlive-lang-polish texlive-lang-spanish    texlive-latex-recommended asciidoc-dblatex python python-dev python-tk libxmu-dev    libglu1-mesa-dev libgl1-mesa-dev    libgtk2.0-dev intltool autoconf libboost-python-dev    libmodbus-dev    libusb-1.0-0-dev yapps2    iptables netcat psmisc desktop-file-utils
 ---> Using cache
 ---> e75fda009662
Step 10/34 : RUN     git clone https://github.com/LinuxCNC/linuxcnc.git emc     && cd emc     && git checkout 2.8
 ---> Using cache
 ---> 73a68ce19bde
Step 11/34 : RUN diff /etc/apt/sources.list /etc/apt/sources.list.orig 2>&1; echo $?
 ---> Using cache
 ---> d977e6ea641c
Step 12/34 : RUN apt-get install -y              bwidget              libtk-img              tclx              python-gtk2
 ---> Using cache
 ---> fcd8a06b9f86
Step 13/34 : RUN    cd emc    && debian/configure uspace    && dpkg-checkbuilddeps    && cd src    && ./autogen.sh    && ./configure --with-realtime=uspace    && make
 ---> Using cache
 ---> 200f8a47440b
Step 14/34 : RUN      git clone  https://github.com/pcb2gcode/pcb2gcode      && cd pcb2gcode      && git checkout e53eae9b8d490f76be6d1716dcf3b6c0ff5aad92
 ---> Using cache
 ---> a921b980e976
Step 15/34 : RUn apt-get install -y              build-essential              automake              autoconf              autoconf-archive              libtool              libboost-program-options-dev              libgtkmm-2.4-dev              gerbv              librsvg2-dev
 ---> Using cache
 ---> 5cdec2ff9238
Step 16/34 : RUN         cd /pcb2gcode      && autoreconf -fvi      && ./configure      &&  make      && make install
 ---> Using cache
 ---> 4737d44b2d4e
Step 17/34 : RUN mkdir /pcbGcodeZprobing
 ---> Using cache
 ---> 1d81de8793de
Step 18/34 : COPY pcbGcodeZprobing.py /pcbGcodeZprobing
 ---> Using cache
 ---> efef92ab7df0
Step 19/34 : COPY resources/ /resources
 ---> 51fddfec3546
Step 20/34 : WORKDIR /etool
 ---> Running in 6a2e74b921c9
Removing intermediate container 6a2e74b921c9
 ---> 7f74a56e9bd4
Step 21/34 : ENV HOME=/etool
 ---> Running in e71aa980f7b4
Removing intermediate container e71aa980f7b4
 ---> c8bf98a4cdff
Step 22/34 : RUN mkdir /etool-bin
 ---> Running in 3b9e40f3ed54
Removing intermediate container 3b9e40f3ed54
 ---> 1838655e57a0
Step 23/34 : ENV PATH=/etool-bin:/emc/scripts:${PATH}
 ---> Running in b11d80a12c14
Removing intermediate container b11d80a12c14
 ---> ae78645e93ca
Step 24/34 : COPY etool.sh /etool-bin/
 ---> b70d71df7cdf
Step 25/34 : COPY RELEASES /etool-bin/
 ---> a454b3aefb34
Step 26/34 : COPY axis_etool.ini /etool-bin/
 ---> aaf151c8cb18
Step 27/34 : COPY sim_mm.tbl /etool-bin/
 ---> 5e9867031d51
Step 28/34 : COPY .linuxcncrc /etool-bin/
 ---> 8fb01f879f4d
Step 29/34 : COPY pcb2gcode.ini /etool-bin/
 ---> 24fdbffc68b6
Step 30/34 : COPY pcb2gcode-control.template /etool-bin/
 ---> 95a9bf312408
Step 31/34 : COPY pcb2gcode-control.template /etool-bin/
 ---> c234fd236bf7
Step 32/34 : COPY Dockerfile /etool-bin/
 ---> 2a2204b60c9c
Step 33/34 : ENTRYPOINT [ "etool.sh" ]
 ---> Running in 993627800a99
Removing intermediate container 993627800a99
 ---> d9cd975a3465
Step 34/34 : CMD [ "usage"]
 ---> Running in 6e7171da6d22
Removing intermediate container 6e7171da6d22
 ---> bc98ea2386a0
Successfully built bc98ea2386a0
Successfully tagged marcus2002/etool:1
0
#+end_example



** Push to docker repo

 *Warning makes it public*
#+BEGIN_SRC bash :eval no-export :results output
docker push marcus2002/etool:$ETOOL_DOCKER_TAG
#+END_SRC


S
#+BEGIN_SRC bash :eval no-export :results output
docker search marcus2002
#+END_SRC

#+RESULTS:
: NAME                             DESCRIPTION   STARS     OFFICIAL   AUTOMATED
: marcus2002/tf-gpu-checker                      0                    
: marcus2002/hello                               0                    
: marcus2002/yolov3tf2                           0                    
: marcus2002/yolov3-tf2-training                 0                    
: marcus2002/tensorflow-lite-api                 0                    
: marcus2002/flatcam                             0                    
: marcus2002/linuxcnc                            0                    







* Fin                                                              :noexport:

** Emacs variables

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:
   #
   # Muuta 
   # org-cdlatex-mode: t
   # eval: (cdlatex-mode)
   #
   # Local ebib:
   # org-ref-default-bibliography: "./pcb-milling.bib"
   # org-ref-bibliography-notes: "./pcb-milling-notes.org"
   # org-ref-pdf-directory: "./pdf/"
   # org-ref-notes-directory: "."
   # bibtex-completion-notes-path: "./pcb-milling-notes.org"
   # ebib-preload-bib-files: ("./pcb-milling.bib")
   # ebib-notes-file: ("./pcb-milling-notes.org")
   # reftex-default-bibliography: ("./pcb-milling.bib")



