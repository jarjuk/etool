#+PROPERTY: header-args+ :var  ETOOL_DOCKER_TAG="6"
* marcus2002/etool - Docker mapping Gerber files to gcode with simulator support
:PROPERTIES:
:TOC:      :include all
:END:

 ~marcus2002/etool~ - a tool for mapping Gerber files to gcode for CNC
 machining, and launching linuxcnc -simulator for validating
 CNC execution paths.

:CONTENTS:
- [[#marcus2002etool---docker-mapping-gerber-files-to-gcode-with-simulator-support][marcus2002/etool - Docker mapping Gerber files to gcode with simulator support]]
  - [[#features][Features]]
  - [[#usage][Usage]]
  - [[#architecture][Architecture]]
  - [[#configuration-files-initialized-in-etool-directory][Configuration files initialized in etool directory]]
  - [[#installing-and-using--marcus2002etool][Installing and using  marcus2002/etool]]
    - [[#install-system-tools][Install system tools]]
      - [[#ubuntulinux][Ubuntu/Linux]]
      - [[#windows-10][Windows 10]]
      - [[#install-macos][Install MacOs]]
    - [[#pull-etool-docker-from-dockerio-repo][Pull etool Docker from docker.io repo]]
    - [[#running-etool][Running etool]]
  - [[#example-etool--workflow][Example etool -workflow]]
  - [[#user-specific-cam-configuration][User specific CAM configuration]]
  - [[#example-projects][Example projects]]
  - [[#development][Development]]
  - [[#release--notes][RELEASE -notes]]
:END:


** Features

 - [X] Tools packaged into the Docker container
   - [X] [[https://github.com/pcb2gcode/pcb2gcode%20][pcb2gcode]] : Tool for mapping Gerber files to gcode
   - [X] [[https://linuxcnc.org/][linuxcnc]]: Simulator for validating CNC execution paths
   - [X] [[file:docker/etool/etool.sh][etool.sh]]: Simple bash script for managing configuration and
     diretory structures
 - [X] Workflow
   - [X] Gerber input:
     - [X] Input example project Gerber files
     - [X] Accept project Gerber files from [[https://www.kicad.org/][Kicad EDA -tool]]
     - [X] Proviso for accepting project Gerber files from EDA tools using
       [[file:docker/etool/pcb2gcode-control.template][different naming scheme]]
   - [X] cam -command converting project Gerger files to gcode
     - [X] [[file:docker/etool/pcb2gcode.ini][opinionated subset]] of ~pcb2gcode~ configurations for
       initialize configuration (possible to add other [[https://github.com/pcb2gcode/pcb2gcode/wiki][~pcb2gcode~ CLI
       configuration options]])
     - [X] set ~pcb2gcode~  autolevelling [on/off]
   - [X] [[file:docker/etool/pcb2gcode-control.template][Gcode output]]:
     - [X] Front, Back, EdgeCut, PTH drill, NPTH drill -gcode files
   - [X] simulator -command for validating Gcode output
 - [X] Configuration management
   - [X] almost 'zero configuration' - requiring one empty, writable data directory
   - [X] directory structure and configurations automagically
     intialized in an empty data directory
   - [X] intialized configuration not overridden (=possible for user
     to modify initialized configuration)
   - [X] User specific CAM -configuration


** Usage

Command line usage
#+BEGIN_SRC bash :eval no-export :results output :results output :exports results
./etool.sh
#+END_SRC

#+RESULTS:
#+begin_example

         marcus2002/etool:5

         A tool for mapping Gerber files to gcode for CNC
         machining and launching linuxcnc -simulator for validating
         CNC execution paths.

         Usage:

         docker DOCKER_OPTS run marcus2002/etool CMD_AND_OPTIONS ...

         where CMD_AND_OPTIONS one of follwoing operations:
         o gerber PROJECT [USER] :   create gcode for PROJECT Gerber -files
                                     USER -specific cam parameters replace default paramerters
                                     (/etool/pcb2gcode.ini, /etool/pcb2gcode-control.template)
         o simulator             : start 'linuxcnc'

         or one of data management utilities:
         o ls                    : list data files in /etool -data directories
         o cleanup               : remove files from /etool -data directories 
                                   /etool/01-gerber, /etool/01-image, /etool/02-ngc
         o example TYPE PROJECT  : copy example PROJECT of TYPE input directory
                                   TYPE is 'gerber' or 'image', with respective input direcotories
                                   01-gerber and 01-image

         or one of miscallaneous commands:
         o --help                : this help text
         o usage                 : workflow example (w. example of multiple commands on one line)
         o gerber-help           : help on pcb2gcode options to put into
                                   /etool/pcb2gcode.ini -file and open image explaining
                                   dimension options
         o releases              : output RELEASES document
         o Dockerfile            : show Dockerfile used

         and DOCKER_OPTS options for 'docker run' -command, particularly
         o --rm                             : cleanup after Docker finished
         o --user $(id -u):$(id -g)         : user credentials (instead of root)
         o -e DISPLAY=unix:0                : allow Docker to open X11 apps
         o -v /tmp/.X11-unix:/tmp/.X11-unix : allow Docker to open X11 apps
         o -v HOSTD:/etool                  : data directory HOSTD (must exist,
                                              owned by --user), structure is initialized
         
         Example usage:

         mkdir $HOME/.etool           # create working directory

         export ETOOL='docker run --rm --user 1000:1000 -e DISPLAY=unix:0 -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME/.etool:/etool marcus2002/etool:5'

         $ETOOL cleanup               # clean working directories
         $ETOOL ls                    # empty directories
         $ETOOL example pad2pad       # init example 'pad2pad'
         $ETOOL ls                    # expect to see directory /etool/01-gerber populated
         $ETOOL gerber pad2pad        # create gCode for gerber
         $ETOOL simulator             # start linuxcnc for simulating gcode

         The commands can be given as a one-liner. For example, for the command above:

         $ETOOL cleanup ls example pad2pad ls gerber pad2pad -- simulator
         
         Notice! Separator '--' in cam -command signaling end of optional parameters
#+end_example


** Architecture

Following box and line diagram gives an overview of ~marcus2002/etool~
-architecture. It presents,

1) *etool -directory*, in which docker ~marcus2002/etool~ initializes
   subdirectory structure and configurations. These configurations are
   accessed by the tools packaged within the container. Configuration
   files are documentend in the following chapter.
2) Gerber files in *01-gerber* subdirectory. These files are created
   using plot command in KiCAD EDA -tool, or using ~example~ -command
   in ~marcus2002/etool~.
3) gcode files in *02-ngc* subdirectory. These files are produced with
   ~cam~ -command in ~marcus2002/etool~.
4) gcode files in *02-ngc* -subdirectory read by ~linuxcnc~ -simulator
   packaged within in ~marcus2002/etool~ docker container.
5) gcode files in *02-ngc* -subdirectory copied to CNC for milling,
   drilling, and edge cutting.

#+begin_example
            +-----------------+      +--------------------------------+
            | EDA -tool e.g.  |      | marcus2002/etool -container    |
            | Kicad           |      | - pcb2gcode                    |
            |                 |      | - linuxcnc -simulator          |
            |                 |      | - etool.sh -script             |
            |                 |      | - initial configuration        |
            +-----------------+      +--------------------------------+
                 plot |                   |     |       ^          ^
                      |   +---------------+     |       |          |
                      |   | example command     |       |tool      |
+----------------+    |   |                init |       |access    | file read
|etool -directory|    |   |                once |       |          | for simulation
|                +----|---|---------------------|-------|---+      |
|                     |   |                     V       |   |      |
|                     |   |                   configuration |      |
|                     |   |                                 |      |
|         +-----------V---V-+        +-----------------+    |      |
|         | 01-gerber       |        | 02-ngc          |    |      |
|         |                 |  cam   |                 |-----------+
|         | Gerber-files    |--------> gcode -files    |    |
|         |                 |        |                 |    |
|         +-----------------+        +-----------------+    |
+----------------------------------------------|------------+
                                               | copy to CNC for
                                               | milling, drilling & cutting
                                               |
                                      +--------V--------+
                                      | CNC machine     |
                                      | - linuxcnc      |
                                      |                 |
                                      +-----------------+
#+end_example


** Configuration files initialized in ~etool directory~

Following table summarizes configuration files initialized under
~etool~ -data directory.

| Configuration file               | Content                                                               |
|----------------------------------+-----------------------------------------------------------------------|
| [[file:docker/etool/pcb2gcode.ini]]  | pcb2gcode -tool CAM parameters  with instructions for 1/2 -sided PCBs |
| [[file:docker/etool/pcb2gcode-control.template][pcb2gcode-control.template]]       | Input/ouput configuration of pcb2gcode -tool                          |
| [[file:docker/etool/axis_etool.ini]] | linuxcnc simulator configuration (w. probe support)                   |


** Installing and using  ~marcus2002/etool~
:PROPERTIES:
:header-args:bash+: :dir  "."
:END:


*** Install system tools 

**** Ubuntu/Linux

- Install Docker: https://docs.docker.com/engine/install/ubuntu/
- Post installation steps for Linux: https://docs.docker.com/engine/install/linux-postinstall/

**** Windows 10

- Install Docker Desktop on Windows: https://docs.docker.com/desktop/windows/install/
  - defines Windows features and Bios setting needed to run Docker
  - a hint for the impatient: installer checks that Docker
    prerequisites are met
- Install VcXsrv Windows X Server: https://sourceforge.net/projects/vcxsrv/
  - When launching VcXsrv choose 'disable access control checked' to
    allow Docker to open X11 windows


**** TODO Install MacOs

- Install Docker Desktop on Mac: https://docs.docker.com/desktop/mac/install/
- Install X11 support on Mac: https://www.xquartz.org/


*MacOs X11 problem*:

Xquartz 2.8.1 may report an error
#+begin_example
libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
#+end_example
which may be solved issuing command
#+begin_example
defaults write org.xquartz.X11 enable_iglx -bool true
#+end_example
and restarting XQuartz again. However, it may be this does not fix the
problem persistently, and XQuartz must be restarted again, after each
X11 session launch.



*** Pull ~etool~ Docker from docker.io repo

Current Docker Tag
#+BEGIN_SRC bash :eval no-export :results output :exports results
echo ETOOL_DOCKER_TAG=$ETOOL_DOCKER_TAG
#+END_SRC

#+RESULTS:
: ETOOL_DOCKER_TAG=2


Pull ~marcus2002/etool:$ETOOL_DOCKER_TAG~ from Docker hub

#+BEGIN_SRC bash :eval no-export :results output :exports both
docker pull marcus2002/etool:$ETOOL_DOCKER_TAG
#+END_SRC

Docker tag 4
: 4: Pulling from marcus2002/etool
: Digest: sha256:281331687cb3dc4239c6036d46fcc1c11c8958da5c8517e385479ae432892bc2
: Status: Image is up to date for marcus2002/etool:4
: docker.io/marcus2002/etool:4


: 4: Pulling from marcus2002/etool
: Digest: sha256:a9b432f5801c2707d4f4d1c28e2866a939b301370024db2cf4ced802f51b5336
: Status: Image is up to date for marcus2002/etool:4
: docker.io/marcus2002/etool:4

Docker tag 2
: 2: Pulling from marcus2002/etool
: Digest: sha256:21ffdfee4f13341bffbcc4ef798778121616eccb86afa89dde75b6bdd4e01fb9
: Status: Image is up to date for marcus2002/etool:2
: docker.io/marcus2002/etool:2


Docker tag 1
: 1: Pulling from marcus2002/etool
: Digest: sha256:67c4ce25b60ac6e15799b827619bf0697da138132d207720cfdd19ff46c602b5
: Status: Image is up to date for marcus2002/etool:1
: docker.io/marcus2002/etool:1


*** Running etool


To simplify running  ~marcus2002/etool~ two scripts are provided

- [[file:etool.sh]] : Running ~marcus2002/etool~ on Linux
- [[file:etoolMac.sh]] : Running ~marcus2002/etool~ on MacOs
- [[file:etool.cmd]] : Running ~marcus2002/etool~  on Windows

Copy these scripts to a CLI PATH and validate ETOOL_DIR and TAG
variables (change if needed). Validate installation and version with
the command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./etool.sh --version
#+END_SRC

#+RESULTS:
:          marcus2002/etool:3


** Example ~etool~ -workflow 

Using data directory ~tmp/etool~ for tesing. Reset directory and
remove old existing directory
#+BEGIN_SRC bash :eval no-export :results output
rm -rf tmp/etool
mkdir -p tmp/etool
#+END_SRC

#+RESULTS:

Use ~<<run-etool>>~ below as a short hand for
#+name: run-etool
#+BEGIN_SRC bash :eval no :results output :exports code
docker run --rm --user $(id -u):$(id -g) -e DISPLAY=unix:0 -v /tmp/.X11-unix:/tmp/.X11-unix -v $(pwd)/tmp/etool:/etool marcus2002/etool:$ETOOL_DOCKER_TAG
#+END_SRC


Calling ~<<run-etool>>~ for the first time inializes directory
structure. Command ~ls~ shows empty directories ~/etool/01-gerber~ and
~/etool/02-ngc~:

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<run-etool>> ls
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber created
Directory /etool/01-image created
Directory /etool/02-ngc created
Directory /etool/linuxcnc/configs/sim.axis created
File /etool/pcb2gcode.ini created
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini created
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl created
File /etool/pcb2gcode-control.template created
File /etool/.linuxcncrc created
/etool/01-gerber:
total 0

/etool/01-image:
total 0

/etool/02-ngc:
total 0
#+end_example

Using ~<<run-etool>>~ to populate example Gerbers for ~soic~ -project:

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<run-etool>> example gerber soic
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber exits - not modified
Directory /etool/01-image exits - not modified
Directory /etool/02-ngc exits - not modified
Directory /etool/linuxcnc/configs/sim.axis exits - not modified
File /etool/pcb2gcode.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
File /etool/pcb2gcode-control.template exits - not modified
File /etool/.linuxcncrc exits - not modified
soic-B_Cu.gbr
soic-B_Mask.gbr
soic-B_Paste.gbr
soic-B_SilkS.gbr
soic-Edge_Cuts.gbr
soic-F_Cu.gbr
soic-F_Mask.gbr
soic-F_Paste.gbr
soic-F_SilkS.gbr
soic-NPTH-drl_map.ps
soic-NPTH.drl
soic-PTH-drl_map.ps
soic-PTH.drl
soic-job.gbrjob
#+end_example

Using ~gerber~-command in ~<<run-etool>>~ to create gcode files for
~soic~ -project:

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<run-etool>> gerber soic
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber exits - not modified
Directory /etool/01-image exits - not modified
Directory /etool/02-ngc exits - not modified
Directory /etool/linuxcnc/configs/sim.axis exits - not modified
File /etool/pcb2gcode.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
File /etool/pcb2gcode-control.template exits - not modified
File /etool/.linuxcncrc exits - not modified
pcb2gcode using configuration files /etool/pcb2gcode-control.template, /etool/pcb2gcode.ini
Importing front side... DONE.
Importing back side... DONE.
Importing outline... DONE.
Processing input files... DONE.
Exporting back... DONE. (Height: 15.1mm Width: 34.1mm)
Exporting front... DONE. (Height: 15.1mm Width: 34.1mm)
Exporting outline... DONE. (Height: 15.1mm Width: 34.1mm) The board should be cut from the FRONT side. 
Importing drill... DONE.
Exporting milldrill... Exporting drill... DONE. The board should be drilled from the FRONT side.
END.
Importing front side... not specified.
Importing back side... not specified.
Importing outline... DONE.
Processing input files... DONE.
Exporting outline... DONE. (Height: 15.1mm Width: 34.1mm) The board should be cut from the FRONT side. 
Importing drill... DONE.
Exporting milldrill... Exporting drill... DONE. The board should be drilled from the FRONT side.
END.
#+end_example

After ~cam~ command, directory ~/etool/02-ngc~ contains gcode in ~ngc~
-files.

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<run-etool>> ls
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber exits - not modified
Directory /etool/01-image exits - not modified
Directory /etool/02-ngc exits - not modified
Directory /etool/linuxcnc/configs/sim.axis exits - not modified
File /etool/pcb2gcode.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
File /etool/pcb2gcode-control.template exits - not modified
File /etool/.linuxcncrc exits - not modified
/etool/01-gerber:
total 100
-rw-r--r-- 1 1000 1000  1953 Apr 12 11:35 soic-B_Cu.gbr
-rw-r--r-- 1 1000 1000  1035 Apr 12 11:35 soic-B_Mask.gbr
-rw-r--r-- 1 1000 1000   541 Apr 12 11:35 soic-B_Paste.gbr
-rw-r--r-- 1 1000 1000   542 Apr 12 11:35 soic-B_SilkS.gbr
-rw-r--r-- 1 1000 1000   749 Apr 12 11:35 soic-Edge_Cuts.gbr
-rw-r--r-- 1 1000 1000  5874 Apr 12 11:35 soic-F_Cu.gbr
-rw-r--r-- 1 1000 1000  3504 Apr 12 11:35 soic-F_Mask.gbr
-rw-r--r-- 1 1000 1000  3010 Apr 12 11:35 soic-F_Paste.gbr
-rw-r--r-- 1 1000 1000  6174 Apr 12 11:35 soic-F_SilkS.gbr
-rw-r--r-- 1 1000 1000 15377 Apr 12 11:35 soic-NPTH-drl_map.ps
-rw-r--r-- 1 1000 1000   377 Apr 12 11:35 soic-NPTH.drl
-rw-r--r-- 1 1000 1000 27525 Apr 12 11:35 soic-PTH-drl_map.ps
-rw-r--r-- 1 1000 1000   532 Apr 12 11:35 soic-PTH.drl
-rw-r--r-- 1 1000 1000  2491 Apr 12 11:35 soic-job.gbrjob

/etool/01-image:
total 0

/etool/02-ngc:
total 628
-rw-r--r-- 1 1000 1000    412 Apr 12 11:35 original_drill.svg
-rw-r--r-- 1 1000 1000   5311 Apr 12 11:35 outp0_original_back.svg
-rw-r--r-- 1 1000 1000    522 Apr 12 11:35 outp0_original_outline.svg
-rw-r--r-- 1 1000 1000  10814 Apr 12 11:35 outp1_original_front.svg
-rw-r--r-- 1 1000 1000    522 Apr 12 11:35 outp2_original_outline.svg
-rw-r--r-- 1 1000 1000   5312 Apr 12 11:35 outp3_masked_back.svg
-rw-r--r-- 1 1000 1000  10817 Apr 12 11:35 outp4_masked_front.svg
-rw-r--r-- 1 1000 1000  61352 Apr 12 11:35 processed_back.svg
-rw-r--r-- 1 1000 1000  37440 Apr 12 11:35 processed_back_final.svg
-rw-r--r-- 1 1000 1000 111087 Apr 12 11:35 processed_front.svg
-rw-r--r-- 1 1000 1000  68775 Apr 12 11:35 processed_front_final.svg
-rw-r--r-- 1 1000 1000   2192 Apr 12 11:35 processed_outline.svg
-rw-r--r-- 1 1000 1000  30502 Apr 12 11:35 soic-B_Cu.ngc
-rw-r--r-- 1 1000 1000   3707 Apr 12 11:35 soic-Edge_Cuts.ngc
-rw-r--r-- 1 1000 1000  50815 Apr 12 11:35 soic-F_Cu.ngc
-rw-r--r-- 1 1000 1000    737 Apr 12 11:35 soic-NPTH.ngc
-rw-r--r-- 1 1000 1000    902 Apr 12 11:35 soic-PTH.ngc
-rw-r--r-- 1 1000 1000  45597 Apr 12 11:35 traced_back.svg
-rw-r--r-- 1 1000 1000  21685 Apr 12 11:35 traced_back_final.svg
-rw-r--r-- 1 1000 1000  80755 Apr 12 11:35 traced_front.svg
-rw-r--r-- 1 1000 1000  38443 Apr 12 11:35 traced_front_final.svg
-rw-r--r-- 1 1000 1000   1770 Apr 12 11:35 traced_outline.svg
#+end_example

Soic -project uses two sided PCB layout. To align board in milling,
the PCB design is symmetrical along Y-axis with origin on lower edge
of the PCB board. The design contains two alignement vias on the
Y-axis. First via is in position (0mm,-3mm) and the second is located
on the Y-axis, 3mm above the board top edge on Y=14mm. These vias are
drilled to -4.5mm *into the supporting plane* (= use thich enough
sacrifial plane where PCB is attached to avoid damages).

The crux of this drilling operation is gcode snippet shown below

#+begin_example
G81 R2.00000  Z-4.5000  F30.00000 X0.00000 Y-3.0000
X0.00000 Y14.00000
G80
#+end_example

To create alignement drilling ~<<run-etool>>~ provides command
~adrill~. To create ~PTH-ALIGN.ngc~ for soic project run

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
 <<run-etool>> adrill soic
#+END_SRC

#+RESULTS:
: PTH_DRILL=/etool/02-ngc/soic-PTH.ngc, ALIGN_DRILL=/etool/02-ngc/soic-PTH-ALIGN.ngc

and use ~ls~ command to inspect directory ~02-ngc~ and validate the
file ~soic-PTH-ALIGN.ngc~ was created.
#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
  <<run-etool>> ls
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber exits - not modified
Directory /etool/01-image exits - not modified
Directory /etool/02-ngc exits - not modified
Directory /etool/linuxcnc/configs/sim.axis exits - not modified
File /etool/pcb2gcode.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
File /etool/pcb2gcode-control.template exits - not modified
File /etool/.linuxcncrc exits - not modified
/etool/01-gerber:
total 100
-rw-r--r-- 1 1000 1000  1953 Apr 12 11:35 soic-B_Cu.gbr
-rw-r--r-- 1 1000 1000  1035 Apr 12 11:35 soic-B_Mask.gbr
-rw-r--r-- 1 1000 1000   541 Apr 12 11:35 soic-B_Paste.gbr
-rw-r--r-- 1 1000 1000   542 Apr 12 11:35 soic-B_SilkS.gbr
-rw-r--r-- 1 1000 1000   749 Apr 12 11:35 soic-Edge_Cuts.gbr
-rw-r--r-- 1 1000 1000  5874 Apr 12 11:35 soic-F_Cu.gbr
-rw-r--r-- 1 1000 1000  3504 Apr 12 11:35 soic-F_Mask.gbr
-rw-r--r-- 1 1000 1000  3010 Apr 12 11:35 soic-F_Paste.gbr
-rw-r--r-- 1 1000 1000  6174 Apr 12 11:35 soic-F_SilkS.gbr
-rw-r--r-- 1 1000 1000 15377 Apr 12 11:35 soic-NPTH-drl_map.ps
-rw-r--r-- 1 1000 1000   377 Apr 12 11:35 soic-NPTH.drl
-rw-r--r-- 1 1000 1000 27525 Apr 12 11:35 soic-PTH-drl_map.ps
-rw-r--r-- 1 1000 1000   532 Apr 12 11:35 soic-PTH.drl
-rw-r--r-- 1 1000 1000  2491 Apr 12 11:35 soic-job.gbrjob

/etool/01-image:
total 0

/etool/02-ngc:
total 632
-rw-r--r-- 1 1000 1000    412 Apr 12 11:35 original_drill.svg
-rw-r--r-- 1 1000 1000   5311 Apr 12 11:35 outp0_original_back.svg
-rw-r--r-- 1 1000 1000    522 Apr 12 11:35 outp0_original_outline.svg
-rw-r--r-- 1 1000 1000  10814 Apr 12 11:35 outp1_original_front.svg
-rw-r--r-- 1 1000 1000    522 Apr 12 11:35 outp2_original_outline.svg
-rw-r--r-- 1 1000 1000   5312 Apr 12 11:35 outp3_masked_back.svg
-rw-r--r-- 1 1000 1000  10817 Apr 12 11:35 outp4_masked_front.svg
-rw-r--r-- 1 1000 1000  61352 Apr 12 11:35 processed_back.svg
-rw-r--r-- 1 1000 1000  37440 Apr 12 11:35 processed_back_final.svg
-rw-r--r-- 1 1000 1000 111087 Apr 12 11:35 processed_front.svg
-rw-r--r-- 1 1000 1000  68775 Apr 12 11:35 processed_front_final.svg
-rw-r--r-- 1 1000 1000   2192 Apr 12 11:35 processed_outline.svg
-rw-r--r-- 1 1000 1000  30502 Apr 12 11:35 soic-B_Cu.ngc
-rw-r--r-- 1 1000 1000   3707 Apr 12 11:35 soic-Edge_Cuts.ngc
-rw-r--r-- 1 1000 1000  50815 Apr 12 11:35 soic-F_Cu.ngc
-rw-r--r-- 1 1000 1000    737 Apr 12 11:35 soic-NPTH.ngc
-rw-r--r-- 1 1000 1000   1158 Apr 12 11:38 soic-PTH-ALIGN.ngc
-rw-r--r-- 1 1000 1000    902 Apr 12 11:35 soic-PTH.ngc
-rw-r--r-- 1 1000 1000  45597 Apr 12 11:35 traced_back.svg
-rw-r--r-- 1 1000 1000  21685 Apr 12 11:35 traced_back_final.svg
-rw-r--r-- 1 1000 1000  80755 Apr 12 11:35 traced_front.svg
-rw-r--r-- 1 1000 1000  38443 Apr 12 11:35 traced_front_final.svg
-rw-r--r-- 1 1000 1000   1770 Apr 12 11:35 traced_outline.svg
#+end_example




Use ~simulator~ command to start linuxcnc simulator. Especially,
validate gcode in ~PTH-ALIGN.ngc~ file
#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports code
<<run-etool>> simulator
#+END_SRC

#+RESULTS:
: Directory /etool/01-gerber exits - not modified
: Directory /etool/02-ngc exits - not modified
: Directory /etool/linuxcnc/configs/sim.axis exits - not modified
: File /etool/pcb2gcode.ini exits - not modified
: File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
: File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
: File /etool/pcb2gcode-control.template exits - not modified
: File /etool/.linuxcncrc exits - not modified
: RUN: linuxcnc

opens dialog for configuration selection (Choose ~axis_etool~)

[[file:pics-keep/simulator-conf.png]]

~linuxcnc~ ~File Open~ -command shows gcode files in ~/etool/02-ngc~
-directory

[[file:pics-keep/simulator-open-file.png]]

Finally, ~cleanup~ -command empties data directories, and ~ls~
-command shows that data directories ~/etool/01-gerber~ and
~/etool/02-ngc~ are empty.
#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<run-etool>> cleanup ls
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber exits - not modified
Directory /etool/01-image exits - not modified
Directory /etool/02-ngc exits - not modified
Directory /etool/linuxcnc/configs/sim.axis exits - not modified
File /etool/pcb2gcode.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
File /etool/pcb2gcode-control.template exits - not modified
File /etool/.linuxcncrc exits - not modified
/etool/01-gerber:

/etool/01-image:
/etool/01-gerber:
total 0

/etool/01-image:
total 0

/etool/02-ngc:
total 0
#+end_example


** User specific CAM configuration

Docker finds configuration files for ~pcb2gcode~ CAM -tool in ~/etool~
directory mapped to a host directory in ~docker run~ -command. For
example, this README uses following command

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports results
echo '<<run-etool>>'
#+END_SRC

#+RESULTS:
: docker run --rm --user $(id -u):$(id -g) -e DISPLAY=unix:0 -v /tmp/.X11-unix:/tmp/.X11-unix -v $(pwd)/tmp/etool:/etool marcus2002/etool:$ETOOL_DOCKER_TAG

In this case, host directory is ~$(pwd)/tmp/etool~, and its directory
listing shows default configuration files ~pcb2gcode.ini~ and
~pcb2gcode-control.template~

#+BEGIN_SRC bash :eval no-export :results output :exports both
ls $(pwd)/tmp/etool
#+END_SRC

#+RESULTS:
: 01-gerber
: 01-image
: 02-ngc
: linuxcnc
: pcb2gcode-control.template
: pcb2gcode.ini

To create user specific configuration files copy these files to
~pcb2gcode-${USR}.ini~ and ~pcb2gcode-control-$USR..template~. For
example to create user specific configuration files USER1 issue
commands, and edit newly created files at will.

#+BEGIN_SRC bash :eval no-export :results output
USR=USER1
cp $(pwd)/tmp/etool/pcb2gcode.ini  $(pwd)/tmp/etool/pcb2gcode-${USR}.ini
cp $(pwd)/tmp/etool/pcb2gcode-control.template  $(pwd)/tmp/etool/pcb2gcode-control-$USR.template
#+END_SRC

#+RESULTS:

After the copy, content of directory  ~$(pwd)/tmp/etool~

#+BEGIN_SRC bash :eval no-export :results output :exports results
ls $(pwd)/tmp/etool
#+END_SRC

#+RESULTS:
: 01-gerber
: 01-image
: 02-ngc
: linuxcnc
: pcb2gcode-control.template
: pcb2gcode-control-USER1.template
: pcb2gcode.ini
: pcb2gcode-USER1.ini


and cam -command can use the user specific configuration files. Notice
the output specifying configuration files
~/etool/pcb2gcode-control-USER1.template~ and
~/etool/pcb2gcode-USER1.ini~.

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<run-etool>> example gerber pad2pad gerber pad2pad USER1
#+END_SRC

#+RESULTS:
#+begin_example
Directory /etool/01-gerber exits - not modified
Directory /etool/01-image exits - not modified
Directory /etool/02-ngc exits - not modified
Directory /etool/linuxcnc/configs/sim.axis exits - not modified
File /etool/pcb2gcode.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/axis_etool.ini exits - not modified
File /etool/linuxcnc/configs/sim.axis/sim_mm.tbl exits - not modified
File /etool/pcb2gcode-control.template exits - not modified
File /etool/.linuxcncrc exits - not modified
pad2pad-B_Cu.gbr
pad2pad-B_Mask.gbr
pad2pad-B_Paste.gbr
pad2pad-B_SilkS.gbr
pad2pad-Edge_Cuts.gbr
pad2pad-F_Cu.gbr
pad2pad-F_Mask.gbr
pad2pad-F_Paste.gbr
pad2pad-F_SilkS.gbr
pad2pad-NPTH-drl_map.ps
pad2pad-NPTH.drl
pad2pad-PTH-drl_map.ps
pad2pad-PTH.drl
pad2pad-job.gbrjob
pcb2gcode using configuration files /etool/pcb2gcode-control-USER1.template, /etool/pcb2gcode-USER1.ini
Importing front side... DONE.
Importing back side... DONE.
Importing outline... DONE.
Processing input files... DONE.
Exporting back... DONE. (Height: 11.85mm Width: 19.6mm)
Exporting front... DONE. (Height: 11.85mm Width: 19.6mm)
Exporting outline... DONE. (Height: 11.85mm Width: 19.6mm) The board should be cut from the FRONT side. 
Importing drill... DONE.
Exporting milldrill... Exporting drill... DONE. The board should be drilled from the FRONT side.
END.
Importing front side... not specified.
Importing back side... not specified.
Importing outline... DONE.
Processing input files... DONE.
Exporting outline... DONE. (Height: 11.85mm Width: 19.6mm) The board should be cut from the FRONT side. 
Importing drill... DONE.
Exporting milldrill... Exporting drill... DONE. The board should be drilled from the FRONT side.
END.
#+end_example


** Example projects 

The tool includes following example gerbers projects:
- ~pad2pad~
  - Resistor, Led size 0805
  - pin-header, 2.54 grid
  - grid 2.54 mm
  - track width 0.5 mm
  - 0,0 is lower left corner
- ~dip~
  - track width 0.5mm (B_Cu)
  - 2x pin-header 1x4, 1.27mm grid, (PTH-drilling)
  - DIP8 package
  - one sided, B_Cu
- ~soic~
  - 2 x Mounting hole 2.5 mm (NPTH)
  - Pin header 1x4, 1.27 mm 
  - 1 via between F_Cu/B_Cu
  - Pin header 1x4, 2 mm
  - SOIC8 package (F_Cu)
  - two sided 30 mm x 11 mm
     - 2 x Alignement vias
     - front copper track 0.25 (F_Cu)
     - back copper track 0.25 (B_Cu)


The tool includes following example image:
- hello.eps
  - 9 x 25 mm black and white text Hello
- sing.png
  - 857 x 854 px 50 km/h traffic sign


** Development

Ref: [[file:docker.org]]


** RELEASE -notes

Ref: [[file:docker/etool/RELEASES]]


* Fin                                                              :noexport:

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # org-make-toc-mode: t
   # End:
